package leetecode.dynaprog;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class OnesAndZeroes {


    public int findMaxForm2(String[] strs, int m, int n) {
        return maxRec(strs, 0, 0, 0, m, n, 0);
    }

    private int maxRec(String strs[], int i, int zeroCount, int oneCount, int m, int n, int size){

        if( i >= strs.length) {
            return size;
        }
        int cnt[] = getZeroOneCount2(strs[i]);
        if(zeroCount + cnt[0] > m || oneCount + cnt[1] > n)
            return maxRec(strs, i+1, zeroCount, oneCount, m, n, size);
        return Math.max(maxRec(strs, i+1, zeroCount + cnt[0], oneCount + cnt[1], m, n, size+1), maxRec(strs, i+1, zeroCount, oneCount, m, n, size));
    }

    private int[] getZeroOneCount2(String str) {

        int ans[] = new int[2];
        for(char c: str.toCharArray()){
            if(c == '0')
                ans[0]++;
            else
                ans[1]++;
        }
        return ans;
    }


    Map<Integer, Integer[]> zoCount = new HashMap<>();
    public int findMaxForm(String[] strs, int m, int n) {
        Map<String, Integer> map = new HashMap<>();
        for(int i=0; i<strs.length; i++){
            zoCount.put(i, getZeroOneCount(strs[i]));
        }
        return maxRec(strs, 0, m, n, map);
    }

    private int maxRec(String strs[], int i, int zeroCount, int oneCount, Map<String, Integer> map){

        if( i >= strs.length) {
            return 0;
        }
        String key = i + "#" + zeroCount + "#" + oneCount;
        if(map.containsKey(key)){
            return map.get(key);
        }
        int ans = 0;
        Integer cnt[] = zoCount.get(i);
        if(zeroCount-cnt[0] < 0 || oneCount-cnt[1] < 0)
            ans = maxRec(strs, i+1, zeroCount, oneCount, map);
        else {
            ans = Math.max(1 + maxRec(strs, i + 1, zeroCount - cnt[0], oneCount - cnt[1], map), maxRec(strs, i + 1, zeroCount, oneCount, map));
        }
        map.put(key, ans);
        return ans;
    }

    private Integer[] getZeroOneCount(String str) {

        Integer ans[] = new Integer[2];
        ans[0] = 0;
        ans[1] = 0;
        for(char c: str.toCharArray()){
            if(c == '0')
                ans[0]++;
            else
                ans[1]++;
        }
        return ans;
    }

    public static void main(String[] args) {
        OnesAndZeroes oz = new OnesAndZeroes();
        String strs[] = {};
        String strs2[] = {"1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101"};
        System.out.println(oz.findMaxForm(strs2, 100, 100));
    }
}
